"""
Django settings for djangongboilerplate project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url

DEBUG = False

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    "smoketest.apps.SmokeTestAppConfig",
    "smoketest.apps.SmokeTestAdminConfig",
    # "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "djangongboilerplate.urls"

WSGI_APPLICATION = "djangongboilerplate.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth."
        "password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth." "password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth." "password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth." "password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_ROOT = os.path.join(
    os.path.dirname(Path(__file__).parents[1]), "staticfiles"
)  # "/app/staticfiles" # os.path.join(BASE_DIR, "django-staticfiles")
STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(os.path.dirname(Path(__file__).parents[1]), "frontend", "dist")
]

WHITENOISE_ROOT = os.path.join(
    os.path.dirname(Path(__file__).parents[1]), "staticfiles"
)


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "DIRS": (
            os.path.join(os.path.dirname(Path(__file__).parents[1]), "staticfiles"),
        ),
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.request",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# Django Rest Framework

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "TEST_REQUEST_RENDERER_CLASSES": (
        "rest_framework.renderers.MultiPartRenderer",
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.TemplateHTMLRenderer",
    ),
}

# Django built-in loggers: django, django.request,
#                          django.db.backends, django.security.*
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "root": {
        "level": "WARNING",
        "handlers": ["console"],
    },
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s %(levelname)s %(module)s "
            "%(process)d %(thread)d] %(message)s"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "api": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "djangongboilerplate": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "smoketest": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        #  Django framework logging
        "django.db.backends": {
            "handlers": ["console"],
            "level": "WARNING",
        },
        "django.request": {
            "handlers": ["console"],
            "level": "WARNING",
        },
        "django.db": {
            "handlers": ["console"],
            "level": "WARNING",
        },
    },
}

# Environment specific settings
try:
    from djangongboilerplate.settings_local import *  # NOQA

    if DEBUG:
        # make all loggers use the console.
        for logger in LOGGING["loggers"]:
            LOGGING["loggers"][logger]["handlers"] = ["console"]
            LOGGING["loggers"][logger]["level"] = "DEBUG"
        LOGGING["loggers"]["django.utils"] = {"level": "INFO"}
        LOGGING["loggers"]["django.db.backends"] = {"level": "INFO"}

except Exception:
    print("No settings_local.py available.")
    ALLOWED_HOSTS = [os.environ["ALLOWED_HOSTS"]]
    DATABASES = {"default": dj_database_url.config(default=os.environ["DATABASE_URL"])}
    DEBUG = os.environ["DEBUG"] == "True"
    EMAIL_HOST_USER = os.environ["SENDGRID_USERNAME"]
    EMAIL_HOST = "smtp.sendgrid.net"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_PASSWORD = os.environ["SENDGRID_PASSWORD"]
    SECRET_KEY = os.environ["SECRET_KEY"]

    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(dsn=os.environ["SENTRY_DSN"], integrations=[DjangoIntegration()])
